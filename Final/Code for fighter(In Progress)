from pickle import FALSE
import pygame


class Fighter():  # setting up of fighter class
    def __init__(self, x, y):
        self.flip = False
        ##Fighter Witdh & Height##
        self.rect = pygame.Rect((x, y, 80, 180))
        self.vel_y = 0
        #Stop player from Jumping when already in air#
        self.jump = False
        self.attacking = False
        self.attack_type = 0
        self.health = 100

    def move(self, screen_width, screen_height, surface, target):  # movement of players##
        SPEED = 10
        GRAVITY = 2
        dx = 0
        dy = 0

        ##Enables Key press Input##
        key = pygame.key.get_pressed()

        #Stops other movement while attacking#
        if self.attacking == False:
            # movement
            if key[pygame.K_a]:
                dx = -SPEED  # Left Movement Fighter_1##
            if key[pygame.K_s]:
                dx = SPEED  # Right Movement Fighter_1##
            #jump#
            if key[pygame.K_w] and self.jump == False:
                self.vel_y = -30
                self.jump = True

            #Attacks#
            if key[pygame.K_r] or key[pygame.K_t]:
                self.attack(surface, target)
                #Which Attack is being used#
                if key[pygame.K_r]:
                    self.attack_type = 1
                if key[pygame.K_t]:
                    self.attack_type = 2

         #apply gravity so that player comes back down when jumpping##
        self.vel_y += GRAVITY
        dy += self.vel_y

        ##Keeps Fighters from going off screen##
        if self.rect.left + dx < 0:
            dx = 0 - self.rect.left
        if self.rect.right + dx > screen_width:
            dx = screen_width - self.rect.right
            # makes it so player doesnt fall through ground and starting height off ground##
        if self.rect.bottom + dy > screen_height - 60:
            self.vel_y = 0
            # Reset Jump
            self.jump = False
            dy = screen_height - 60 - self.rect.bottom

        #Makes Sure that Fighters always face each other#
        if target.rect.centerx > self.rect.centerx:
            self.flip = False
        else:
            self.flip = True

        ##Updates The Fighter Position##
        self.rect.x += dx
        self.rect.y += dy

    #Building attack area and creating collision dection#
    def attack(self, surface, target):
        self.attacking = True
        attacking_rect = pygame.Rect(
            self.rect.centerx - (2 * self.rect.width * self.flip), self.rect.y, 2 * self.rect.width, self.rect.height)
        #Setting collision dection#
        if attacking_rect.colliderect(target.rect):
            #Other fighter health drops when attacked#
            target.health -= 10

        pygame.draw.rect(surface, (2, 255, 0), attacking_rect)

    ##Drawing of Fighters Function##
    def draw(self, surface):
        pygame.draw.rect(surface, (255, 0, 0), self.rect)
